<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Areia_Channel_Manager"
   author="Areia"
   id="bdecb2809fc86be2e77859e0"
   language="Lua"
   purpose="Create personal tracker-style channels"
   save_state="y"
   date_written="2021-09-20 18:00:00"
   requires="5.06"
   version="0.2"
   >
<description trim="y">
<![CDATA[
]]>
</description>

</plugin>

<include name="constants.lua"/>



<aliases>
    <alias
     match="^acm\s+(?:add|new)$"
     enabled="y"
     script="Config.add_channel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^acm\s+(?:add|new)\s+(?<name>.+)$"
     enabled="y"
     script="Config.add_channel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    
    <alias
     match="^acm\s+(?:del|dele|delet|delete|rem|remo|remov|remove)$"
     enabled="y"
     script="Config.remove_channel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^acm\s+(?:del|dele|delet|delete|rem|remo|remov|remove)\s+(?<name>.+)$"
     enabled="y"
     script="Config.remove_channel"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    
    <alias
     match="^acm\s+li?st?$"
     enabled="y"
     script="Config.list_channels"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    
    <alias
     match="^acm\s+config\s+timestamps(?<setting>.*)$"
     enabled="y"
     script="Config.set_timestamps"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^acm\s+config\s+mute(?<setting>.*)$"
     enabled="y"
     script="Config.set_mute"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^acm\s+config\s+commlog(?<setting>.*)$"
     enabled="y"
     script="Config.set_commlog"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
    <alias
     match="^acm\s+config\s+vireview(?<setting>.*)$"
     enabled="y"
     script="Config.set_vireview"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>



<triggers>
</triggers>



<script>
<![CDATA[
require "commas"
require "copytable"
require "gmcphelper"
require "serialize"
require "tprint"
require "var"
require "wait"
dofile(GetInfo(60) .. "aardwolf_colors.lua")



--------------------------------------------------
-- Config
--------------------------------------------------

Config = {}

function Config.initialize()
    Config.load()
end

function Config.default()
    local data = {
        ["channels"] = {},
        ["mute"] = false,
        ["timestamps"] = true,
        ["commlog"] = true,
        ["vireview"] = true,
    }
    return serialize.save_simple(data)
end

function Config.load()
    local strvar = var.config or Config.default()
    local data = loadstring("return " .. strvar)()
    Config.data = data
end

function Config.save()
    var.config = serialize.save_simple(Config.data)
end

function Config.get(key)
    return Config.data[key]
end

function Config.set(key, val)
    Config.data[key] = val
    Config.save()
end

function Config.new_channel(name)
    name = name:lower()
    return {
        ["name"] = name,
        ["prefix"] = string.format("@W%s@w: @w", name),
        ["sound"] = "",
        ["volume"] = 100,
        ["history"] = {},
    }
end

function Config.get_channel(name)
    return Config.get("channels")[name:lower()]
end

function Config.set_channel(name, key, val)
    Config.get_channel(name)[key] = val
    Config.save()
end

function Config.add_channel_history(name, msg, time)
    local history = Config.get_channel(name).history
    history[#history + 1] = {msg=msg, time=time}
    if (#history > 100) then
        table.remove(history, 1)
    end
    Config.save()
end

function Config.select_channel()
    local channelNames = {}
    for name, info in pairs(Config.get("channels")) do
        channelNames[#channelNames + 1] = name
    end
    if (#channelNames == 0) then
        return -1
    end
    local index = utils.choose("Select a channel name.", "Channels", channelNames)
    if (not index) then
        -- No selection / cancelled
        return
    end
    return channelNames[index]
end

function Config.add_channel(alias, line, wc)
    local name = wc.name
    if (not name) then
        name = utils.inputbox("Enter the name of the new channel.",
            "New Channel - Name"
        )
        if (not name) then
            -- No input / cancelled
            Utility.msg_prim("Channel creation aborted.")
            return
        end
    end
    name = trim(name:lower())
    if (name == "") then
        Utility.msg_prim("Channel creation aborted. No name given.")
        return
    end
    
    if (Config.get_channel(name)) then
        Utility.msg_prim("Channel creation aborted. That channel already exists.")
        return
    end
    
    local new = Config.new_channel(name)
    local prefix = utils.inputbox(
        "Enter a prefix for the channel. You may add color codes to the text.",
        "New Channel - Prefix",
        new.prefix -- default value
    )
    if (not prefix) then
        Utility.msg_prim("Channel creation aborted.")
        return
    end
    prefix = trim(prefix)
    if (prefix == "") then
        Utility.msg_prim("Channel creation aborted. No prefix given.")
        return
    end
    
    local sound = utils.inputbox(
        "The sound file to play for this channel. Leave blank for no sound.",
        "New Channel - Sound"
    )
    if (not sound) then
        Utility.msg_prim("Channel creation aborted.")
        return
    end
    
    local volume = new.volume
    if (sound == "") then
        volume = 0
    else
        volume = utils.inputbox(
            "Enter the volume level for the channel's sound. Must be 0 - 100.",
            "New Channel - Volume",
            new.volume, -- default value
            nil, nil, -- font info
            {validate = function(t) return tonumber(t) and true or false end}
        )
        if (not volume) then
            Utility.msg_prim("Channel creation aborted.")
            return
        end
        volume = math.floor(tonumber(volume))
    end
    
    new.prefix = prefix
    new.sound = sound
    new.volume = volume
    Config.get("channels")[name] = new
    Config.save()
    Channel.add_aliases()
    Utility.msg_prim(string.format(
        "New @Y%s @wchannel added.",
        Utility.pascal_case(name)
    ))
end

function Config.remove_channel(alias, line, wc)
    local name = wc.name or Config.select_channel()
    if (not name) then
        Utility.msg_prim("Channel deletion aborted. No name given.")
        return
    elseif (name == -1) then
        Utility.msg_prim("Channel deletion aborted. No channels to delete.")
        return
    end
    
    name = trim(name:lower())
    if (name == "") then
        Utility.msg_prim("Channel deletion aborted. No name given.")
        return
    end
    
    if (not Config.get_channel(name)) then
        Utility.msg_prim("Channel deletion aborted. That channel doesn't exist.")
        return
    end
    
    Config.get("channels")[name] = nil
    Config.save()
    Channel.add_aliases()
    Utility.msg_prim(string.format(
        "@Y%s @wchannel deleted.",
        Utility.pascal_case(name)
    ))
end

function Config.list_channels(alias, line, wc)
    local channels = Config.get("channels")
    local alphabetized = {}
    for _, channel in pairs(channels) do
        alphabetized[#alphabetized + 1] = channel.name
    end
    if (#alphabetized == 0) then
        Utility.msg_prim("No channels yet added.")
        Utility.msg_sec("Enter @Yacm new @wto add a new channel.")
        return
    end
    table.sort(alphabetized)
    
    local seperator = "+-----------------+----------------------+----------------------+-----+"
    local entry = "| %-15.15s | %-20.20s | %-20.20s | %-3.3s |"
    Utility.print(seperator)
    Utility.print(entry:format("Name", "Prefix", "Sound", "Vol"))
     Utility.print(seperator)
    for _, channel in ipairs(alphabetized) do
        Note(entry:format(
            Utility.pascal_case(channels[channel].name),
            channels[channel].prefix,
            channels[channel].sound,
            channels[channel].volume
        ))
    end
    Utility.print(seperator)
end

function Config.set_timestamps(alias, line, wc)
    local setting = trim(wc.setting:lower())
    if (setting == "on") then
        Config.set("timestamps", true)
    elseif (setting == "off") then
        Config.set("timestamps", false)
    elseif (setting == "") then
        Config.set("timestamps", not Config.get("timestamps"))
    else
        Utility.msg_prim("Syntax: @Yacm config timestamps [on|off]")
        return
    end
    local timestamps = Config.get("timestamps")
    local msg = "Timestamps on channel history will %s be shown."
    Utility.msg_prim(msg:format(timestamps and "now" or "no longer"))
end

function Config.set_mute(alias, line, wc)
    local setting = trim(wc.setting:lower())
    if (setting == "on") then
        Config.set("mute", true)
    elseif (setting == "off") then
        Config.set("mute", false)
    elseif (setting == "") then
        Config.set("mute", not Config.get("mute"))
    else
        Utility.msg_prim("Syntax: @Yacm config mute [on|off]")
        return
    end
    local mute = Config.get("mute")
    local msg = "Sounds %smuted."
    Utility.msg_prim(msg:format(mute and "" or "un"))
end

function Config.set_commlog(alias, line, wc)
    local setting = trim(wc.setting:lower())
    if (setting == "on") then
        Config.set("commlog", true)
    elseif (setting == "off") then
        Config.set("commlog", false)
    elseif (setting == "") then
        Config.set("commlog", not Config.get("commlog"))
    else
        Utility.msg_prim("Syntax: @Yacm config commlog [on|off]")
        return
    end
    local commlog = Config.get("commlog")
    local msg = "Will %s add channel messages to the comm log."
    Utility.msg_prim(msg:format(commlog and "now" or "no longer"))
    if (commlog and not Utility.comm_log_enabled()) then
        Utility.msg_sec("Note: The chat capture miniwindow plugin is not currently enabled.")
    end
end

function Config.set_vireview(alias, line, wc)
    local setting = trim(wc.setting:lower())
    if (setting == "on") then
        Config.set("vireview", true)
    elseif (setting == "off") then
        Config.set("vireview", false)
    elseif (setting == "") then
        Config.set("vireview", not Config.get("vireview"))
    else
        Utility.msg_prim("Syntax: @Yacm config vireview [on|off]")
        return
    end
    local vireview = Config.get("vireview")
    local msg = "Will %s add channel messages to VI review buffers."
    Utility.msg_prim(msg:format(vireview and "now" or "no longer"))
    if (vireview and not Utility.vi_review_enabled()) then
        Utility.msg_sec("Note: The VI Review Buffers plugin is not currently enabled.")
    end
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Channel
--------------------------------------------------

Channel = {}

function Channel.initialize()
    Channel.add_aliases()
end

function Channel.remove_aliases()
    return DeleteAliasGroup("group_channel_parseinput")
end

function Channel.add_aliases()
    Channel.remove_aliases()
    
    local aliasFlags = alias_flag.Enabled + alias_flag.IgnoreAliasCase
        + alias_flag.RegularExpression + alias_flag.Temporary
    for name, info in pairs(Config.get("channels")) do
        local aliasName = string.format("alias_channel_%s", name)
        local ret = AddAlias(
            aliasName,
            string.format("^(?<channel>%s)(?<arg>.*)$", name), -- match text
            "", -- response
            aliasFlags,
            "Channel.parse_input" -- script
        )
        
        if (ret == eOK) then
            SetAliasOption(aliasName, "group", "group_channel_parseinput")
        else
            Utility.msg_prim(string.format(
                "Failed to create @Y%s @wchannel alias [@R%s@w].", name, ret
            ))
        end
    end
end

function Channel.parse_input(alias, line, wc)
    local channel = wc.channel:lower()
    local arg = trim(wc.arg)
    if (arg == "") then
        Utility.msg_prim(string.format("%s what?", Utility.pascal_case(channel)))
        return
    end
    
    if (Utility.starts_with(arg, "-h")) then
        Channel.show_history(channel, trim(arg:gsub("-h", "", 1)))
        return
    end
    
    Channel.post(channel, arg)
end

function Channel.show_history(channel, arg)
    local channelData = Config.get_channel(channel)
    if (not channelData) then
        return
    end
    
    if (not arg or arg == "") then
        Channel.show_history_full(channelData)
        return
    end
    
    local previous = tonumber(arg)
    if (previous) then
        Channel.show_history_previous(channelData, math.floor(previous))
        return
    end
    
    Channel.show_history_containing(channelData, arg)
end

function Channel.display_history_entry(channel, entry)
    if (Config.get("timestamps")) then
        local line = "[%s] - %s%s"
        Utility.print(line:format(entry.time, channel.prefix, entry.msg))
    else
        local line = "%s%s"
        Utility.print(line:format(channel.prefix, entry.msg))
    end
end

function Channel.show_history_full(channel)
    local history = channel.history
    if (#history == 0) then
        local name = Utility.pascal_case(channel.name)
        Utility.print(string.format("No @Y%s @whistory to display.", name))
        return
    end
    
    for _, entry in ipairs(history) do
        Channel.display_history_entry(channel, entry)
    end
end

function Channel.show_history_previous(channel, previous)
    local history = channel.history
    local entries = #history
    if (entries == 0) then
        local name = Utility.pascal_case(channel.name)
        Utility.print(string.format("No @Y%s @whistory to display.", name))
        return
    end
    
    if (previous < 1) then
        previous = 1
    elseif (previous >= entries) then
        previous = entries
    end
    
    local firstEntry = entries - previous + 1
    local lastEntry = entries
    for i = firstEntry, lastEntry do
        Channel.display_history_entry(channel, history[i])
    end
end

function Channel.show_history_containing(channel, str)
    local history = channel.history
    if (#history == 0) then
        local name = Utility.pascal_case(channel.name)
        Utility.print(string.format("No @Y%s @whistory to display.", name))
        return
    end
    
    str = str:lower()
    if ((Utility.starts_with(str, "\"") or Utility.starts_with(str, "'"))
    and (Utility.ends_with(str, "\"") or Utility.ends_with(str, "'"))) then
        str = str:sub(2, #str - 1) -- strip surrounding quotes if any
    end
    local results = {}
    for _, entry in ipairs(history) do
        if (strip_colours(entry.msg:lower()):match(str)) then
            results[#results + 1] = entry
        end
    end
    if (#results == 0) then
        local name = Utility.pascal_case(channel.name)
        Utility.print(string.format("No @Y%s @whistory containing '%s'.",
            name, str
        ))
        return
    end
    
    for _, entry in ipairs(results) do
        Channel.display_history_entry(channel, entry)
    end
end

function Channel.post(channel, msg)
    if (not msg or msg == "") then
        return false
    end
    channel = Config.get_channel(channel)
    if (not channel) then
        return false
    end
    
    -- Record in history
    local time = os.date("%d %b %I:%M:%S%p") -- e.g., 21 Sep 05:01:35PM
    Config.add_channel_history(channel.name, msg, time)
    
    if (not Config.get("mute") and channel.sound ~= "" and channel.volume > 0) then
        local vol = -(20 - 0.2*channel.volume)
        PlaySound(0, channel.sound, false, vol, 0)
    end
    
    local line = string.format("%s%s", channel.prefix, msg)
    local tab = Utility.pascal_case(channel.name)

    if (Config.get("commlog") and Utility.comm_log_enabled()) then
        Utility.send_to_comm_log(line, tab)
    end

    if (Config.get("vireview") and Utility.vi_review_enabled()) then
        Utility.send_to_vi_review(line, tab)
    end
    
    Utility.print(line)
    return true
end
]]>
</script>



<aliases>
    <alias
     match="^acm\s+update$"
     enabled="y"
     script="Update.update"
     regexp="y"
     ignore_case="y"
     sequence="100"
    >
    </alias>
</aliases>

<script>
<![CDATA[
--------------------------------------------------
-- Update
--------------------------------------------------

Update = {}

function Update.update(alias, line, wc)
    local name = GetPluginName()
    local url = "https://raw.githubusercontent.com/AreiaAard/%s/main/%s.xml"
    raw = url:format(name, name:lower())
    async_ok, async = pcall (require, "async")
    if async_ok then
        plugin_page = async.doAsyncRemoteRequest(raw, Update.raw_get, "HTTPS")
    else
        Utility.plugin_message("Error. Update failed.")
    end
end

function Update.raw_get(retval, page, status, headers, full_status, request_url)
    local name = GetPluginName()
    local version = GetPluginInfo(GetPluginID(), 19)
    if (status == 200) then
        raw_version = tonumber(string.match(page, '%s%s+version="([0-9%.]+)"'))
    end
    if (raw_version == version) then
        Utility.msg_prim(string.format(
            "@Y%s @wis up-to-date with the current version.",
            name
        ))
    elseif (raw_version > version) then
        Utility.msg_prim(string.format(
            "Updating @Y%s @wfrom v%s to v%s.",
            name, version, raw_version
        ))
        Utility.print("                 Please do not touch anything.")
        local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
        file:write(page)
        file:close()
    end
    raw_version = nil
    if (GetAlphaOption("script_prefix") == "") then
        SetAlphaOption("script_prefix", "\\\\\\")
    end
    Execute(string.format(
        "%sDoAfterSpecial(1, \"ReloadPlugin('%s')\", sendto.script)",
        GetAlphaOption("script_prefix"), GetPluginID()
    ))
    Utility.msg_prim("Update completed.")
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Utility
--------------------------------------------------

Utility = {}

function Utility.initialize()
    local modules = {
        Config,
        Channel,
    }
    for _, module in ipairs(modules) do
        if (module.initialize) then
            module.initialize()
        end
    end
end

function Utility.deinitialize()
end

function Utility.print(str)
    -- Lets us use Aard color codes in our ColourNotes
    AnsiNote(stylesToANSI(ColoursToStyles(string.format("@w%s@w", str))))
end

function Utility.msg_prim(str, ...)
    Utility.print(string.format("[@YChannel Manager@w]: %s", str))
    for _, msg in ipairs{...} do
        Utility.second_msg(msg)
    end
end

function Utility.msg_sec(str)
    Utility.print(string.format("                   %s", str))
end

function Utility.pascal_case(str)
    str = str:gsub("(%a)([%w_']*)",
        function(first,remainder)
            return string.format("%s%s", first:upper(), remainder:lower())
        end
    )
    return str
end

function Utility.starts_with(s, t)
    if not (type(s) == "string" and type(t) == "string") then
        return false
    end
    return s:sub(1, #t) == t
end

function Utility.ends_with(s, t)
    return Utility.starts_with(s:reverse(), t:reverse())
end

function Utility.comm_log_enabled()
    return GetPluginInfo("b555825a4a5700c35fa80780", 17)
end

function Utility.send_to_comm_log(text, tab, timestamp, omit)
    local code, err = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", text, tab, timestamp, omit)
    if (code ~= error_code.eOK) then
        Utility.msg_prim("Error sending message to comm log:")
        local msg = ("%s [%d]"):format(error_desc[code], code)
        Utility.msg_sec(msg)
        return false
    end
    return true
end

function Utility.vi_review_enabled()
    return GetPluginInfo("6000a4c6f0e71d31fecf523d", 17)
end

function Utility.send_to_vi_review(text, tab)
    text = strip_colours(text)
    local cmd = "vi add %s=%s"
    cmd = cmd:format(tab, text)
    Execute(cmd)
    return true
end
]]>
</script>



<script>
<![CDATA[
--------------------------------------------------
-- Plugin Callbacks
--------------------------------------------------

function OnPluginInstall()
    Utility.initialize()
end

function OnPluginEnable()
    OnPluginInstall()
end

function OnPluginClose()
    Utility.deinitialize()
end

function OnPluginDisable()
    OnPluginClose()
end

function OnPluginBroadcast(msg, id, name, text)
    if (id == "3e7dedbe37e44942dd46d264") then
    end
end
]]>
</script>


</muclient>
